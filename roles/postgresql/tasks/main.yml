---
- name: Include RHEL-specific etcd installation tasks
  include_tasks: rhel.yml
  when: ansible_facts['os_family'] in ['RedHat', 'CentOS', 'Rocky']

# Install Patroni
- name: Install Patroni with pip (for all supported OSes)
  ansible.builtin.pip:
    name: "{{ item.name }}"
    state: "{{ item.state }}" 
  loop: "{{ packages_postgresql_group_pip }}"

- name: Create Patroni config directory
  ansible.builtin.file:
    path: "/etc/patroni"
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'
  when: pg_data_dir is defined

- name: Create Patroni config directory
  ansible.builtin.file:
    path: "/var/log/postgres/"
    state: directory
    owner: postgres
    group: postgres
    mode: '0750'
  when: pg_data_dir is defined

- name: Create PostgreSQL data directory
  ansible.builtin.file:
    path: "{{ pg_data_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'
  when: pg_data_dir is defined

# Configure Patroni (example configuration file)
- name: Deploy etcd environment variables for all users
  template:
    src: patroni_profile_env.j2
    dest: /etc/profile.d/patroni_env.sh
    owner: root
    group: root
    mode: '0644'

- name: Create Patroni configuration file
  ansible.builtin.template:
    src: patroni.yml.j2
    dest: /etc/patroni/patroni.yml
    mode: '0600'
    owner: postgres
    group: postgres

- name: Create pgbackrest configuration directory
  file:
    path: /etc/pgbackrest
    state: directory
    owner: postgres
    group: postgres
    mode: '0750'
    
- name: Create pgbackrest config
  template:
    src: pgbackrest.conf.j2
    dest: /etc/pgbackrest/pgbackrest.conf
    owner: postgres
    group: postgres
    mode: '0640'

- name: Create Patroni systemd service file
  ansible.builtin.copy:
    dest: /etc/systemd/system/patroni.service
    owner: root
    group: root
    mode: '0644'
    content: |
      [Unit]
      Description=Patroni PostgreSQL High Availability
      After=network.target

      [Service]
      Type=simple
      User=postgres
      Group=postgres
      ExecStart=/usr/local/bin/patroni /etc/patroni/patroni.yml
      Restart=always
      RestartSec=5

      [Install]
      WantedBy=multi-user.target

- name: Reload systemd to pick up new Patroni service
  ansible.builtin.systemd:
    daemon_reload: true

- name: Enable and start Patroni service
  ansible.builtin.systemd:
    name: patroni
    enabled: true
    state: started

